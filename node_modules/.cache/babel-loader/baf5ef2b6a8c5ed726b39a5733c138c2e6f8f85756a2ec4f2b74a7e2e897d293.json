{"ast":null,"code":"var _jsxFileName = \"/Users/parkerhuang/Desktop/projects/books/src/App.js\",\n  _s = $RefreshSig$();\nimport { jsQR } from 'jsqr';\nimport { useEffect, useRef, useState, useCallback } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QRScanner() {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    // Access webcam\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        facingMode: \"environment\"\n      }\n    }).then(stream => {\n      const video = videoRef.current;\n      if (video) video.srcObject = stream;\n      video.setAttribute(\"playsinline\", true); // Required for iOS\n      video.addEventListener('loadmetadata', () => {\n        video.play();\n        requestAnimationFrame(tick);\n      });\n    });\n    function tick() {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\n        const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n        const code = jsQR(imageData.data, imageData.width, imageData.height);\n        if (code) {\n          console.log(\"QR Code Data:\", code.data);\n          // Optionally draw box or highlight\n        }\n      }\n      requestAnimationFrame(tick);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      style: {\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(QRScanner, \"0gwqVvoOV2or9Ql4L8GH2BGn3hc=\");\n_c = QRScanner;\nexport default QRScanner;\n\n// function App() {\n//   const scannerRef = useRef(null);\n//   const [error, setError] = useState(null);\n//   const [barcode, setBarcode] = useState(null);\n//   const [scanning, setScanning] = useState(true);\n//   const [bookInfo, setBookInfo] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [processing, setProcessing] = useState(false);\n//   const isValidISBN13 = (isbn) => {\n//     if (!/^\\d{13}$/.test(isbn)) return false;\n//     let sum = 0;\n//     for (let i = 0; i < 12; i++) {\n//       const num = parseInt(isbn[i], 10);\n//       sum += (i % 2 === 0) ? num : num * 3;\n//     }\n//     const check = (10 - (sum % 10)) % 10;\n//     return check === parseInt(isbn[12], 10);\n//   };\n//   const handleDetected = useCallback(async (result) => {\n//     console.log(\"Detected barcode result:\", result);\n//     console.log(\"Detected varcode:\", result);\n//     if (processing) return;\n//     setProcessing(true);\n\n//     const codeResult = result.codeResult;\n//   if (codeResult) {\n//     const code = codeResult.code;\n//     console.log('Barcode detected:', code, 'Format:', codeResult.format);\n\n//     // Check if the detected format is EAN-13 or EAN-8\n//     if (codeResult.format !== 'ean_13' && codeResult.format !== 'ean_8') {\n//       console.warn('Detected barcode is not EAN-13 or EAN-8:', codeResult.format);\n//       return;\n//     }\n\n//     // Validate ISBN-13\n//     if (codeResult.format === 'ean_13' && !isValidISBN13(code)) {\n//       console.warn('Invalid ISBN-13 detected:', code);\n//       setError('Scanned barcode is not a valid ISBN-13.');\n//       return;\n//     }\n\n//     setBarcode(code);\n//     setScanning(false);\n//     Quagga.stop();\n//     setLoading(true);\n\n//     try {\n//       const response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=isbn:${code}`);\n//       if (!response.ok) {\n//         throw new Error('Network response not ok');\n//       }\n//       const data = await response.json();\n//       if (data.totalItems > 0) {\n//         const book = data.items[0].volumeInfo;\n//         setBookInfo(book);\n//         console.log(book)\n//       } else {\n//         setError('No book found for the scanned barcode.');\n//       }\n//     } catch (err) {\n//       console.error('Error fetching book data:', err);\n//       setError('Failed to fetch book information. Please try again.');\n//     } finally {\n//       setLoading(false);\n//       setProcessing(false);\n//     }\n//   }}, [processing]);\n\n//   useEffect(() => {\n//     console.log(\"initializing Quagga...\")\n//     if (scannerRef.current) {\n//       Quagga.init({\n//         inputStream: {\n//           name: \"Live\",\n//           type: \"LiveStream\",\n//           target: scannerRef.current,\n//           constraints: {\n//             facingMode: \"environment\",\n//           },\n//         },\n\n//         decoder: {\n//           readers: [\"code_128_reader\",\n//                     \"ean_reader\",\n//                     \"ean_8_reader\",\n//                     \"code_39_reader\",\n//                     \"code_39_vin_reader\",\n//                     \"codabar_reader\",\n//                     \"upc_reader\",\n//                     \"upc_e_reader\",\n//                     \"i2of5_reader\"\n//           ],\n//         },\n//       }, function(err) {\n//         if (err) {\n//           console.error(\"Quagga initialization error:\", err);\n//           setError(\"Failed to access the camera. Please allow camera permissions.\")\n//           return;\n//         }\n//         if (scanning) {\n//           console.log(\"quagga initialized successfully. starting quagga...\")\n//           Quagga.start();\n//         }\n//       });\n\n//       Quagga.onProcessed(function(result) {\n//   var drawingCtx = Quagga.canvas.ctx.overlay,\n//       drawingCanvas = Quagga.canvas.dom.overlay;\n\n//   if (result) {\n//     if (result.boxes) {\n//       drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute(\"width\")), parseInt(drawingCanvas.getAttribute(\"height\")));\n//       result.boxes.filter(function (box) {\n//         return box !== result.box;\n//       }).forEach(function (box) {\n//         Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, { color: \"green\", lineWidth: 2 });\n//       });\n//     }\n\n//     if (result.box) {\n//       Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, { color: \"#00F\", lineWidth: 2 });\n//     }\n\n//     if (result.codeResult && result.codeResult.code) {\n//       Quagga.ImageDebug.drawPath(result.line, { x: 'x', y: 'y' }, drawingCtx, { color: 'red', lineWidth: 3 });\n//     }\n//   }\n// });\n//       Quagga.onDetected(handleDetected);\n\n//       return () => {\n//         console.log(\"Cleaning up Quagga...\");\n//         Quagga.offDetected(handleDetected);\n//         Quagga.stop();\n//       };\n//     }\n//   }, [handleDetected, scanning]);\n\n//   // useEffect(() => {\n//   //     if (scanning) {\n//   //       console.log(\"Starting Quagga for scanning...\");\n//   //       Quagga.start();\n//   //     } else {\n//   //       console.log(\"Stopping Quagga...\");\n//   //       Quagga.stop();\n//   //     }\n//   // }, [scanning]);\n\n//   const handleScanAgain = () => {\n//     if (!scanning) {\n//       setBarcode(null);\n//       setBookInfo(null);\n//       setError(null);\n//       setProcessing(false);\n//       setLoading(false);\n//       setScanning(true);\n\n//       Quagga.stop(() => {\n//         Quagga.start();\n//         setScanning(true);\n//       })\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Barcode Scanner</h1>\n//       {error && <p className=\"error\">{error}</p>}\n//       {barcode ? (\n//         <div className=\"result\">\n//           {loading ? (\n//             <p>Fetching book information...</p>\n//           ) : bookInfo ? (\n//             <div className=\"book-info\">\n//               <h2>{bookInfo.title}</h2>\n//               {bookInfo.authors && <p><strong>Author(s):</strong> {bookInfo.authors.join(', ')}</p>}\n//               {bookInfo.publisher && <p><strong>Publisher:</strong> {bookInfo.publisher}</p>}\n//               {bookInfo.publishedDate && <p><strong>Published Date:</strong> {bookInfo.publishedDate}</p>}\n//               {bookInfo.description && <p><strong>Description:</strong> {bookInfo.description}</p>}\n//               {bookInfo.imageLinks && bookInfo.imageLinks.thumbnail ? (\n//                 <img src={bookInfo.imageLinks.thumbnail} alt={`${bookInfo.title} cover`} />\n//               ) : (\n//                 <img src=\"/placeholder.png\" alt=\"No cover available\" />\n//               )}\n//             </div>\n\n//           ) : (\n//             <p>No book information available.</p>\n//           )}\n//           <button onClick={handleScanAgain}>Scan Again</button>\n//         </div>\n//       ) : (\n//         <div className=\"scanner\">\n//           <div ref={scannerRef} className=\"scanner-container\" />\n//           {scanning && <p>Scanning for barcodes...</p>}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"QRScanner\");","map":{"version":3,"names":["jsQR","useEffect","useRef","useState","useCallback","jsxDEV","_jsxDEV","QRScanner","_s","videoRef","canvasRef","video","current","canvas","context","getContext","navigator","mediaDevices","getUserMedia","facingMode","then","stream","srcObject","setAttribute","addEventListener","play","requestAnimationFrame","tick","readyState","HAVE_ENOUGH_DATA","width","videoWidth","height","videoHeight","drawImage","imageData","getImageData","code","data","console","log","children","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","display","_c","$RefreshReg$"],"sources":["/Users/parkerhuang/Desktop/projects/books/src/App.js"],"sourcesContent":["import { jsQR } from 'jsqr';\nimport { useEffect, useRef, useState, useCallback} from 'react';\nimport './App.css';\n\nfunction QRScanner() {\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    // Access webcam\n    navigator.mediaDevices.getUserMedia({ video: { facingMode: \"environment\" } })\n      .then(stream => {\n        const video = videoRef.current;\n        if (video)\n        video.srcObject = stream;\n        video.setAttribute(\"playsinline\", true); // Required for iOS\n        video.addEventListener('loadmetadata', () => {\n          video.play();\n          requestAnimationFrame(tick);\n        });\n      })\n\n    function tick() {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\n        const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n\n        const code = jsQR(imageData.data, imageData.width, imageData.height);\n        if (code) {\n          console.log(\"QR Code Data:\", code.data);\n          // Optionally draw box or highlight\n        }\n      }\n\n      requestAnimationFrame(tick);\n    }\n  }, []);\n\n  return (\n    <div>\n      <video ref={videoRef} style={{ width: '100%' }} />\n      <canvas ref={canvasRef} style={{ display: 'none' }} />\n    </div>\n  );\n}\n\nexport default QRScanner;\n\n// function App() {\n//   const scannerRef = useRef(null);\n//   const [error, setError] = useState(null);\n//   const [barcode, setBarcode] = useState(null);\n//   const [scanning, setScanning] = useState(true);\n//   const [bookInfo, setBookInfo] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [processing, setProcessing] = useState(false);\n//   const isValidISBN13 = (isbn) => {\n//     if (!/^\\d{13}$/.test(isbn)) return false;\n//     let sum = 0;\n//     for (let i = 0; i < 12; i++) {\n//       const num = parseInt(isbn[i], 10);\n//       sum += (i % 2 === 0) ? num : num * 3;\n//     }\n//     const check = (10 - (sum % 10)) % 10;\n//     return check === parseInt(isbn[12], 10);\n//   };\n//   const handleDetected = useCallback(async (result) => {\n//     console.log(\"Detected barcode result:\", result);\n//     console.log(\"Detected varcode:\", result);\n//     if (processing) return;\n//     setProcessing(true);\n\n//     const codeResult = result.codeResult;\n//   if (codeResult) {\n//     const code = codeResult.code;\n//     console.log('Barcode detected:', code, 'Format:', codeResult.format);\n\n//     // Check if the detected format is EAN-13 or EAN-8\n//     if (codeResult.format !== 'ean_13' && codeResult.format !== 'ean_8') {\n//       console.warn('Detected barcode is not EAN-13 or EAN-8:', codeResult.format);\n//       return;\n//     }\n\n//     // Validate ISBN-13\n//     if (codeResult.format === 'ean_13' && !isValidISBN13(code)) {\n//       console.warn('Invalid ISBN-13 detected:', code);\n//       setError('Scanned barcode is not a valid ISBN-13.');\n//       return;\n//     }\n    \n//     setBarcode(code);\n//     setScanning(false);\n//     Quagga.stop();\n//     setLoading(true);\n\n//     try {\n//       const response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=isbn:${code}`);\n//       if (!response.ok) {\n//         throw new Error('Network response not ok');\n//       }\n//       const data = await response.json();\n//       if (data.totalItems > 0) {\n//         const book = data.items[0].volumeInfo;\n//         setBookInfo(book);\n//         console.log(book)\n//       } else {\n//         setError('No book found for the scanned barcode.');\n//       }\n//     } catch (err) {\n//       console.error('Error fetching book data:', err);\n//       setError('Failed to fetch book information. Please try again.');\n//     } finally {\n//       setLoading(false);\n//       setProcessing(false);\n//     }\n//   }}, [processing]);\n\n//   useEffect(() => {\n//     console.log(\"initializing Quagga...\")\n//     if (scannerRef.current) {\n//       Quagga.init({\n//         inputStream: {\n//           name: \"Live\",\n//           type: \"LiveStream\",\n//           target: scannerRef.current,\n//           constraints: {\n//             facingMode: \"environment\",\n//           },\n//         },\n\n//         decoder: {\n//           readers: [\"code_128_reader\",\n//                     \"ean_reader\",\n//                     \"ean_8_reader\",\n//                     \"code_39_reader\",\n//                     \"code_39_vin_reader\",\n//                     \"codabar_reader\",\n//                     \"upc_reader\",\n//                     \"upc_e_reader\",\n//                     \"i2of5_reader\"\n//           ],\n//         },\n//       }, function(err) {\n//         if (err) {\n//           console.error(\"Quagga initialization error:\", err);\n//           setError(\"Failed to access the camera. Please allow camera permissions.\")\n//           return;\n//         }\n//         if (scanning) {\n//           console.log(\"quagga initialized successfully. starting quagga...\")\n//           Quagga.start();\n//         }\n//       });\n\n//       Quagga.onProcessed(function(result) {\n//   var drawingCtx = Quagga.canvas.ctx.overlay,\n//       drawingCanvas = Quagga.canvas.dom.overlay;\n\n//   if (result) {\n//     if (result.boxes) {\n//       drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute(\"width\")), parseInt(drawingCanvas.getAttribute(\"height\")));\n//       result.boxes.filter(function (box) {\n//         return box !== result.box;\n//       }).forEach(function (box) {\n//         Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, { color: \"green\", lineWidth: 2 });\n//       });\n//     }\n\n//     if (result.box) {\n//       Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, { color: \"#00F\", lineWidth: 2 });\n//     }\n\n//     if (result.codeResult && result.codeResult.code) {\n//       Quagga.ImageDebug.drawPath(result.line, { x: 'x', y: 'y' }, drawingCtx, { color: 'red', lineWidth: 3 });\n//     }\n//   }\n// });\n//       Quagga.onDetected(handleDetected);\n\n//       return () => {\n//         console.log(\"Cleaning up Quagga...\");\n//         Quagga.offDetected(handleDetected);\n//         Quagga.stop();\n//       };\n//     }\n//   }, [handleDetected, scanning]);\n\n//   // useEffect(() => {\n//   //     if (scanning) {\n//   //       console.log(\"Starting Quagga for scanning...\");\n//   //       Quagga.start();\n//   //     } else {\n//   //       console.log(\"Stopping Quagga...\");\n//   //       Quagga.stop();\n//   //     }\n//   // }, [scanning]);\n\n//   const handleScanAgain = () => {\n//     if (!scanning) {\n//       setBarcode(null);\n//       setBookInfo(null);\n//       setError(null);\n//       setProcessing(false);\n//       setLoading(false);\n//       setScanning(true);\n\n//       Quagga.stop(() => {\n//         Quagga.start();\n//         setScanning(true);\n//       })\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Barcode Scanner</h1>\n//       {error && <p className=\"error\">{error}</p>}\n//       {barcode ? (\n//         <div className=\"result\">\n//           {loading ? (\n//             <p>Fetching book information...</p>\n//           ) : bookInfo ? (\n//             <div className=\"book-info\">\n//               <h2>{bookInfo.title}</h2>\n//               {bookInfo.authors && <p><strong>Author(s):</strong> {bookInfo.authors.join(', ')}</p>}\n//               {bookInfo.publisher && <p><strong>Publisher:</strong> {bookInfo.publisher}</p>}\n//               {bookInfo.publishedDate && <p><strong>Published Date:</strong> {bookInfo.publishedDate}</p>}\n//               {bookInfo.description && <p><strong>Description:</strong> {bookInfo.description}</p>}\n//               {bookInfo.imageLinks && bookInfo.imageLinks.thumbnail ? (\n//                 <img src={bookInfo.imageLinks.thumbnail} alt={`${bookInfo.title} cover`} />\n//               ) : (\n//                 <img src=\"/placeholder.png\" alt=\"No cover available\" />\n//               )}\n//             </div>\n            \n//           ) : (\n//             <p>No book information available.</p>\n//           )}\n//           <button onClick={handleScanAgain}>Scan Again</button>\n//         </div>\n//       ) : (\n//         <div className=\"scanner\">\n//           <div ref={scannerRef} className=\"scanner-container\" />\n//           {scanning && <p>Scanning for barcodes...</p>}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":";;AAAA,SAASA,IAAI,QAAQ,MAAM;AAC3B,SAASC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,WAAW,QAAO,OAAO;AAC/D,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMQ,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,MAAMU,KAAK,GAAGF,QAAQ,CAACG,OAAO;IAC9B,MAAMC,MAAM,GAAGH,SAAS,CAACE,OAAO;IAChC,MAAME,OAAO,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;;IAEvC;IACAC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MAAEP,KAAK,EAAE;QAAEQ,UAAU,EAAE;MAAc;IAAE,CAAC,CAAC,CAC1EC,IAAI,CAACC,MAAM,IAAI;MACd,MAAMV,KAAK,GAAGF,QAAQ,CAACG,OAAO;MAC9B,IAAID,KAAK,EACTA,KAAK,CAACW,SAAS,GAAGD,MAAM;MACxBV,KAAK,CAACY,YAAY,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,CAAC;MACzCZ,KAAK,CAACa,gBAAgB,CAAC,cAAc,EAAE,MAAM;QAC3Cb,KAAK,CAACc,IAAI,CAAC,CAAC;QACZC,qBAAqB,CAACC,IAAI,CAAC;MAC7B,CAAC,CAAC;IACJ,CAAC,CAAC;IAEJ,SAASA,IAAIA,CAAA,EAAG;MACd,IAAIhB,KAAK,CAACiB,UAAU,KAAKjB,KAAK,CAACkB,gBAAgB,EAAE;QAC/ChB,MAAM,CAACiB,KAAK,GAAGnB,KAAK,CAACoB,UAAU;QAC/BlB,MAAM,CAACmB,MAAM,GAAGrB,KAAK,CAACsB,WAAW;QACjCnB,OAAO,CAACoB,SAAS,CAACvB,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEE,MAAM,CAACiB,KAAK,EAAEjB,MAAM,CAACmB,MAAM,CAAC;QAC3D,MAAMG,SAAS,GAAGrB,OAAO,CAACsB,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEvB,MAAM,CAACiB,KAAK,EAAEjB,MAAM,CAACmB,MAAM,CAAC;QAEzE,MAAMK,IAAI,GAAGrC,IAAI,CAACmC,SAAS,CAACG,IAAI,EAAEH,SAAS,CAACL,KAAK,EAAEK,SAAS,CAACH,MAAM,CAAC;QACpE,IAAIK,IAAI,EAAE;UACRE,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,IAAI,CAACC,IAAI,CAAC;UACvC;QACF;MACF;MAEAZ,qBAAqB,CAACC,IAAI,CAAC;IAC7B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACErB,OAAA;IAAAmC,QAAA,gBACEnC,OAAA;MAAOoC,GAAG,EAAEjC,QAAS;MAACkC,KAAK,EAAE;QAAEb,KAAK,EAAE;MAAO;IAAE;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClDzC,OAAA;MAAQoC,GAAG,EAAEhC,SAAU;MAACiC,KAAK,EAAE;QAAEK,OAAO,EAAE;MAAO;IAAE;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnD,CAAC;AAEV;AAACvC,EAAA,CA9CQD,SAAS;AAAA0C,EAAA,GAAT1C,SAAS;AAgDlB,eAAeA,SAAS;;AAExignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}