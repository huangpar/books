{"ast":null,"code":"const path = require('path');\nconst os = require('os');\nconst {\n  getPrebuildName,\n  isNwjs,\n  isElectron,\n  isAlpine\n} = require('./lib/prebuild');\n\n// Jest can allow users to mock 'fs', but we need the real fs\nconst fs = typeof jest !== 'undefined' ? jest.requireActual('fs') : require('fs');\n\n// Workaround to fix webpack's build warnings: 'the request of a dependency is an expression'\nconst runtimeRequire = typeof __webpack_require__ === 'function' ? __non_webpack_require__ : require; // eslint-disable-line\n\n/**\n * Find the best path to the binding file\n * @param {string} basePath - Base path of the module, where binaries will be located\n * @param {object} options - Describe how the prebuilt binary is named\n * @param {boolean} verifyPrebuild - True if we are verifying that a prebuild exists\n * @param {boolean} throwOnMissing - True if an error should be thrown when the binary is missing\n * @returns\n */\nfunction resolvePath(basePath, options, verifyPrebuild, throwOnMissing) {\n  if (typeof basePath !== 'string' || !basePath) throw new Error(`Invalid basePath to pkg-prebuilds`);\n  if (typeof options !== 'object' || !options) throw new Error(`Invalid options to pkg-prebuilds`);\n  if (typeof options.name !== 'string' || !options.name) throw new Error(`Invalid name to pkg-prebuilds`);\n  let isNodeApi = false;\n  if (options.napi_versions && Array.isArray(options.napi_versions)) {\n    isNodeApi = true;\n  }\n  const arch = verifyPrebuild && process.env.npm_config_arch || os.arch();\n  const platform = verifyPrebuild && process.env.npm_config_platform || os.platform();\n  let runtime = 'node';\n  // If node-api, then everything can share the same binary\n  if (!isNodeApi) {\n    if (verifyPrebuild && process.env.npm_config_runtime) {\n      runtime = process.env.npm_config_runtime;\n    } else if (isElectron()) {\n      runtime = 'electron';\n    } else if (isNwjs()) {\n      runtime = 'node-webkit';\n    }\n  }\n  const candidates = [];\n  if (!verifyPrebuild) {\n    // Try for a locally built binding\n    candidates.push(path.join(basePath, 'build', 'Debug', `${options.name}.node`), path.join(basePath, 'build', 'Release', `${options.name}.node`));\n  }\n  let libc = undefined;\n  if (isAlpine(platform)) libc = 'musl';\n\n  // Look for prebuilds\n  if (isNodeApi) {\n    // Look for node-api versioned builds\n    for (const ver of options.napi_versions) {\n      const prebuildName = getPrebuildName({\n        name: options.name,\n        platform,\n        arch,\n        libc,\n        napi_version: ver,\n        runtime\n        // armv: options.armv ? (arch === 'arm64' ? '8' : vars.arm_version) : null,\n      });\n      candidates.push(path.join(basePath, 'prebuilds', prebuildName));\n    }\n  } else {\n    throw new Error('Not implemented for NAN!');\n  }\n  let foundPath = null;\n  for (const candidate of candidates) {\n    if (fs.existsSync(candidate)) {\n      const stat = fs.statSync(candidate);\n      if (stat.isFile()) {\n        foundPath = candidate;\n        break;\n      }\n    }\n  }\n  if (!foundPath && throwOnMissing) {\n    const candidatesStr = candidates.map(cand => ` - ${cand}`).join('\\n');\n    throw new Error(`Failed to find binding for ${options.name}\\nTried paths:\\n${candidatesStr}`);\n  }\n  return foundPath;\n}\nfunction loadBinding(basePath, options) {\n  const foundPath = resolvePath(basePath, options, false, true);\n\n  // Note: this error should not be hit, as resolvePath will throw if the binding is missing\n  if (!foundPath) throw new Error(`Failed to find binding for ${options.name}`);\n  return runtimeRequire(foundPath);\n}\nloadBinding.resolve = resolvePath;\nmodule.exports = loadBinding;","map":{"version":3,"names":["path","require","os","getPrebuildName","isNwjs","isElectron","isAlpine","fs","jest","requireActual","runtimeRequire","__webpack_require__","__non_webpack_require__","resolvePath","basePath","options","verifyPrebuild","throwOnMissing","Error","name","isNodeApi","napi_versions","Array","isArray","arch","process","env","npm_config_arch","platform","npm_config_platform","runtime","npm_config_runtime","candidates","push","join","libc","undefined","ver","prebuildName","napi_version","foundPath","candidate","existsSync","stat","statSync","isFile","candidatesStr","map","cand","loadBinding","resolve","module","exports"],"sources":["/Users/parkerhuang/Desktop/projects/books/node_modules/pkg-prebuilds/bindings.js"],"sourcesContent":["const path = require('path')\nconst os = require('os')\nconst { getPrebuildName, isNwjs, isElectron, isAlpine } = require('./lib/prebuild')\n\n// Jest can allow users to mock 'fs', but we need the real fs\nconst fs = typeof jest !== 'undefined' ? jest.requireActual('fs') : require('fs')\n\n// Workaround to fix webpack's build warnings: 'the request of a dependency is an expression'\nconst runtimeRequire = typeof __webpack_require__ === 'function' ? __non_webpack_require__ : require // eslint-disable-line\n\n/**\n * Find the best path to the binding file\n * @param {string} basePath - Base path of the module, where binaries will be located\n * @param {object} options - Describe how the prebuilt binary is named\n * @param {boolean} verifyPrebuild - True if we are verifying that a prebuild exists\n * @param {boolean} throwOnMissing - True if an error should be thrown when the binary is missing\n * @returns\n */\nfunction resolvePath(basePath, options, verifyPrebuild, throwOnMissing) {\n\tif (typeof basePath !== 'string' || !basePath) throw new Error(`Invalid basePath to pkg-prebuilds`)\n\n\tif (typeof options !== 'object' || !options) throw new Error(`Invalid options to pkg-prebuilds`)\n\tif (typeof options.name !== 'string' || !options.name) throw new Error(`Invalid name to pkg-prebuilds`)\n\n\tlet isNodeApi = false\n\tif (options.napi_versions && Array.isArray(options.napi_versions)) {\n\t\tisNodeApi = true\n\t}\n\n\tconst arch = (verifyPrebuild && process.env.npm_config_arch) || os.arch()\n\tconst platform = (verifyPrebuild && process.env.npm_config_platform) || os.platform()\n\n\tlet runtime = 'node'\n\t// If node-api, then everything can share the same binary\n\tif (!isNodeApi) {\n\t\tif (verifyPrebuild && process.env.npm_config_runtime) {\n\t\t\truntime = process.env.npm_config_runtime\n\t\t} else if (isElectron()) {\n\t\t\truntime = 'electron'\n\t\t} else if (isNwjs()) {\n\t\t\truntime = 'node-webkit'\n\t\t}\n\t}\n\n\tconst candidates = []\n\n\tif (!verifyPrebuild) {\n\t\t// Try for a locally built binding\n\t\tcandidates.push(\n\t\t\tpath.join(basePath, 'build', 'Debug', `${options.name}.node`),\n\t\t\tpath.join(basePath, 'build', 'Release', `${options.name}.node`)\n\t\t)\n\t}\n\n\tlet libc = undefined\n\tif (isAlpine(platform)) libc = 'musl'\n\n\t// Look for prebuilds\n\tif (isNodeApi) {\n\t\t// Look for node-api versioned builds\n\t\tfor (const ver of options.napi_versions) {\n\t\t\tconst prebuildName = getPrebuildName({\n\t\t\t\tname: options.name,\n\t\t\t\tplatform,\n\t\t\t\tarch,\n\t\t\t\tlibc,\n\t\t\t\tnapi_version: ver,\n\t\t\t\truntime,\n\t\t\t\t// armv: options.armv ? (arch === 'arm64' ? '8' : vars.arm_version) : null,\n\t\t\t})\n\t\t\tcandidates.push(path.join(basePath, 'prebuilds', prebuildName))\n\t\t}\n\t} else {\n\t\tthrow new Error('Not implemented for NAN!')\n\t}\n\n\tlet foundPath = null\n\n\tfor (const candidate of candidates) {\n\t\tif (fs.existsSync(candidate)) {\n\t\t\tconst stat = fs.statSync(candidate)\n\t\t\tif (stat.isFile()) {\n\t\t\t\tfoundPath = candidate\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!foundPath && throwOnMissing) {\n\t\tconst candidatesStr = candidates.map((cand) => ` - ${cand}`).join('\\n')\n\t\tthrow new Error(`Failed to find binding for ${options.name}\\nTried paths:\\n${candidatesStr}`)\n\t}\n\n\treturn foundPath\n}\n\nfunction loadBinding(basePath, options) {\n\tconst foundPath = resolvePath(basePath, options, false, true)\n\n\t// Note: this error should not be hit, as resolvePath will throw if the binding is missing\n\tif (!foundPath) throw new Error(`Failed to find binding for ${options.name}`)\n\n\treturn runtimeRequire(foundPath)\n}\nloadBinding.resolve = resolvePath\n\nmodule.exports = loadBinding\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}