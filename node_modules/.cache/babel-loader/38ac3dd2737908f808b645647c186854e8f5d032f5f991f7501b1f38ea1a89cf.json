{"ast":null,"code":"import { jsQR } from 'jsqr';\nimport { useEffect, useRef, useState, useCallback } from 'react';\nimport './App.css';\n\n// function App() {\n//   const scannerRef = useRef(null);\n//   const [error, setError] = useState(null);\n//   const [barcode, setBarcode] = useState(null);\n//   const [scanning, setScanning] = useState(true);\n//   const [bookInfo, setBookInfo] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [processing, setProcessing] = useState(false);\n//   const isValidISBN13 = (isbn) => {\n//     if (!/^\\d{13}$/.test(isbn)) return false;\n//     let sum = 0;\n//     for (let i = 0; i < 12; i++) {\n//       const num = parseInt(isbn[i], 10);\n//       sum += (i % 2 === 0) ? num : num * 3;\n//     }\n//     const check = (10 - (sum % 10)) % 10;\n//     return check === parseInt(isbn[12], 10);\n//   };\n//   const handleDetected = useCallback(async (result) => {\n//     console.log(\"Detected barcode result:\", result);\n//     console.log(\"Detected varcode:\", result);\n//     if (processing) return;\n//     setProcessing(true);\n\n//     const codeResult = result.codeResult;\n//   if (codeResult) {\n//     const code = codeResult.code;\n//     console.log('Barcode detected:', code, 'Format:', codeResult.format);\n\n//     // Check if the detected format is EAN-13 or EAN-8\n//     if (codeResult.format !== 'ean_13' && codeResult.format !== 'ean_8') {\n//       console.warn('Detected barcode is not EAN-13 or EAN-8:', codeResult.format);\n//       return;\n//     }\n\n//     // Validate ISBN-13\n//     if (codeResult.format === 'ean_13' && !isValidISBN13(code)) {\n//       console.warn('Invalid ISBN-13 detected:', code);\n//       setError('Scanned barcode is not a valid ISBN-13.');\n//       return;\n//     }\n\n//     setBarcode(code);\n//     setScanning(false);\n//     Quagga.stop();\n//     setLoading(true);\n\n//     try {\n//       const response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=isbn:${code}`);\n//       if (!response.ok) {\n//         throw new Error('Network response not ok');\n//       }\n//       const data = await response.json();\n//       if (data.totalItems > 0) {\n//         const book = data.items[0].volumeInfo;\n//         setBookInfo(book);\n//         console.log(book)\n//       } else {\n//         setError('No book found for the scanned barcode.');\n//       }\n//     } catch (err) {\n//       console.error('Error fetching book data:', err);\n//       setError('Failed to fetch book information. Please try again.');\n//     } finally {\n//       setLoading(false);\n//       setProcessing(false);\n//     }\n//   }}, [processing]);\n\n//   useEffect(() => {\n//     console.log(\"initializing Quagga...\")\n//     if (scannerRef.current) {\n//       Quagga.init({\n//         inputStream: {\n//           name: \"Live\",\n//           type: \"LiveStream\",\n//           target: scannerRef.current,\n//           constraints: {\n//             facingMode: \"environment\",\n//           },\n//         },\n\n//         decoder: {\n//           readers: [\"code_128_reader\",\n//                     \"ean_reader\",\n//                     \"ean_8_reader\",\n//                     \"code_39_reader\",\n//                     \"code_39_vin_reader\",\n//                     \"codabar_reader\",\n//                     \"upc_reader\",\n//                     \"upc_e_reader\",\n//                     \"i2of5_reader\"\n//           ],\n//         },\n//       }, function(err) {\n//         if (err) {\n//           console.error(\"Quagga initialization error:\", err);\n//           setError(\"Failed to access the camera. Please allow camera permissions.\")\n//           return;\n//         }\n//         if (scanning) {\n//           console.log(\"quagga initialized successfully. starting quagga...\")\n//           Quagga.start();\n//         }\n//       });\n\n//       Quagga.onProcessed(function(result) {\n//   var drawingCtx = Quagga.canvas.ctx.overlay,\n//       drawingCanvas = Quagga.canvas.dom.overlay;\n\n//   if (result) {\n//     if (result.boxes) {\n//       drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute(\"width\")), parseInt(drawingCanvas.getAttribute(\"height\")));\n//       result.boxes.filter(function (box) {\n//         return box !== result.box;\n//       }).forEach(function (box) {\n//         Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, { color: \"green\", lineWidth: 2 });\n//       });\n//     }\n\n//     if (result.box) {\n//       Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, { color: \"#00F\", lineWidth: 2 });\n//     }\n\n//     if (result.codeResult && result.codeResult.code) {\n//       Quagga.ImageDebug.drawPath(result.line, { x: 'x', y: 'y' }, drawingCtx, { color: 'red', lineWidth: 3 });\n//     }\n//   }\n// });\n//       Quagga.onDetected(handleDetected);\n\n//       return () => {\n//         console.log(\"Cleaning up Quagga...\");\n//         Quagga.offDetected(handleDetected);\n//         Quagga.stop();\n//       };\n//     }\n//   }, [handleDetected, scanning]);\n\n//   // useEffect(() => {\n//   //     if (scanning) {\n//   //       console.log(\"Starting Quagga for scanning...\");\n//   //       Quagga.start();\n//   //     } else {\n//   //       console.log(\"Stopping Quagga...\");\n//   //       Quagga.stop();\n//   //     }\n//   // }, [scanning]);\n\n//   const handleScanAgain = () => {\n//     if (!scanning) {\n//       setBarcode(null);\n//       setBookInfo(null);\n//       setError(null);\n//       setProcessing(false);\n//       setLoading(false);\n//       setScanning(true);\n\n//       Quagga.stop(() => {\n//         Quagga.start();\n//         setScanning(true);\n//       })\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Barcode Scanner</h1>\n//       {error && <p className=\"error\">{error}</p>}\n//       {barcode ? (\n//         <div className=\"result\">\n//           {loading ? (\n//             <p>Fetching book information...</p>\n//           ) : bookInfo ? (\n//             <div className=\"book-info\">\n//               <h2>{bookInfo.title}</h2>\n//               {bookInfo.authors && <p><strong>Author(s):</strong> {bookInfo.authors.join(', ')}</p>}\n//               {bookInfo.publisher && <p><strong>Publisher:</strong> {bookInfo.publisher}</p>}\n//               {bookInfo.publishedDate && <p><strong>Published Date:</strong> {bookInfo.publishedDate}</p>}\n//               {bookInfo.description && <p><strong>Description:</strong> {bookInfo.description}</p>}\n//               {bookInfo.imageLinks && bookInfo.imageLinks.thumbnail ? (\n//                 <img src={bookInfo.imageLinks.thumbnail} alt={`${bookInfo.title} cover`} />\n//               ) : (\n//                 <img src=\"/placeholder.png\" alt=\"No cover available\" />\n//               )}\n//             </div>\n\n//           ) : (\n//             <p>No book information available.</p>\n//           )}\n//           <button onClick={handleScanAgain}>Scan Again</button>\n//         </div>\n//       ) : (\n//         <div className=\"scanner\">\n//           <div ref={scannerRef} className=\"scanner-container\" />\n//           {scanning && <p>Scanning for barcodes...</p>}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":["jsQR","useEffect","useRef","useState","useCallback"],"sources":["/Users/parkerhuang/Desktop/projects/books/src/App.js"],"sourcesContent":["import { jsQR } from 'jsqr';\nimport { useEffect, useRef, useState, useCallback} from 'react';\nimport './App.css';\n\n\n\n// function App() {\n//   const scannerRef = useRef(null);\n//   const [error, setError] = useState(null);\n//   const [barcode, setBarcode] = useState(null);\n//   const [scanning, setScanning] = useState(true);\n//   const [bookInfo, setBookInfo] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [processing, setProcessing] = useState(false);\n//   const isValidISBN13 = (isbn) => {\n//     if (!/^\\d{13}$/.test(isbn)) return false;\n//     let sum = 0;\n//     for (let i = 0; i < 12; i++) {\n//       const num = parseInt(isbn[i], 10);\n//       sum += (i % 2 === 0) ? num : num * 3;\n//     }\n//     const check = (10 - (sum % 10)) % 10;\n//     return check === parseInt(isbn[12], 10);\n//   };\n//   const handleDetected = useCallback(async (result) => {\n//     console.log(\"Detected barcode result:\", result);\n//     console.log(\"Detected varcode:\", result);\n//     if (processing) return;\n//     setProcessing(true);\n\n//     const codeResult = result.codeResult;\n//   if (codeResult) {\n//     const code = codeResult.code;\n//     console.log('Barcode detected:', code, 'Format:', codeResult.format);\n\n//     // Check if the detected format is EAN-13 or EAN-8\n//     if (codeResult.format !== 'ean_13' && codeResult.format !== 'ean_8') {\n//       console.warn('Detected barcode is not EAN-13 or EAN-8:', codeResult.format);\n//       return;\n//     }\n\n//     // Validate ISBN-13\n//     if (codeResult.format === 'ean_13' && !isValidISBN13(code)) {\n//       console.warn('Invalid ISBN-13 detected:', code);\n//       setError('Scanned barcode is not a valid ISBN-13.');\n//       return;\n//     }\n    \n//     setBarcode(code);\n//     setScanning(false);\n//     Quagga.stop();\n//     setLoading(true);\n\n//     try {\n//       const response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=isbn:${code}`);\n//       if (!response.ok) {\n//         throw new Error('Network response not ok');\n//       }\n//       const data = await response.json();\n//       if (data.totalItems > 0) {\n//         const book = data.items[0].volumeInfo;\n//         setBookInfo(book);\n//         console.log(book)\n//       } else {\n//         setError('No book found for the scanned barcode.');\n//       }\n//     } catch (err) {\n//       console.error('Error fetching book data:', err);\n//       setError('Failed to fetch book information. Please try again.');\n//     } finally {\n//       setLoading(false);\n//       setProcessing(false);\n//     }\n//   }}, [processing]);\n\n//   useEffect(() => {\n//     console.log(\"initializing Quagga...\")\n//     if (scannerRef.current) {\n//       Quagga.init({\n//         inputStream: {\n//           name: \"Live\",\n//           type: \"LiveStream\",\n//           target: scannerRef.current,\n//           constraints: {\n//             facingMode: \"environment\",\n//           },\n//         },\n\n//         decoder: {\n//           readers: [\"code_128_reader\",\n//                     \"ean_reader\",\n//                     \"ean_8_reader\",\n//                     \"code_39_reader\",\n//                     \"code_39_vin_reader\",\n//                     \"codabar_reader\",\n//                     \"upc_reader\",\n//                     \"upc_e_reader\",\n//                     \"i2of5_reader\"\n//           ],\n//         },\n//       }, function(err) {\n//         if (err) {\n//           console.error(\"Quagga initialization error:\", err);\n//           setError(\"Failed to access the camera. Please allow camera permissions.\")\n//           return;\n//         }\n//         if (scanning) {\n//           console.log(\"quagga initialized successfully. starting quagga...\")\n//           Quagga.start();\n//         }\n//       });\n\n//       Quagga.onProcessed(function(result) {\n//   var drawingCtx = Quagga.canvas.ctx.overlay,\n//       drawingCanvas = Quagga.canvas.dom.overlay;\n\n//   if (result) {\n//     if (result.boxes) {\n//       drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute(\"width\")), parseInt(drawingCanvas.getAttribute(\"height\")));\n//       result.boxes.filter(function (box) {\n//         return box !== result.box;\n//       }).forEach(function (box) {\n//         Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, { color: \"green\", lineWidth: 2 });\n//       });\n//     }\n\n//     if (result.box) {\n//       Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, { color: \"#00F\", lineWidth: 2 });\n//     }\n\n//     if (result.codeResult && result.codeResult.code) {\n//       Quagga.ImageDebug.drawPath(result.line, { x: 'x', y: 'y' }, drawingCtx, { color: 'red', lineWidth: 3 });\n//     }\n//   }\n// });\n//       Quagga.onDetected(handleDetected);\n\n//       return () => {\n//         console.log(\"Cleaning up Quagga...\");\n//         Quagga.offDetected(handleDetected);\n//         Quagga.stop();\n//       };\n//     }\n//   }, [handleDetected, scanning]);\n\n//   // useEffect(() => {\n//   //     if (scanning) {\n//   //       console.log(\"Starting Quagga for scanning...\");\n//   //       Quagga.start();\n//   //     } else {\n//   //       console.log(\"Stopping Quagga...\");\n//   //       Quagga.stop();\n//   //     }\n//   // }, [scanning]);\n\n//   const handleScanAgain = () => {\n//     if (!scanning) {\n//       setBarcode(null);\n//       setBookInfo(null);\n//       setError(null);\n//       setProcessing(false);\n//       setLoading(false);\n//       setScanning(true);\n\n//       Quagga.stop(() => {\n//         Quagga.start();\n//         setScanning(true);\n//       })\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Barcode Scanner</h1>\n//       {error && <p className=\"error\">{error}</p>}\n//       {barcode ? (\n//         <div className=\"result\">\n//           {loading ? (\n//             <p>Fetching book information...</p>\n//           ) : bookInfo ? (\n//             <div className=\"book-info\">\n//               <h2>{bookInfo.title}</h2>\n//               {bookInfo.authors && <p><strong>Author(s):</strong> {bookInfo.authors.join(', ')}</p>}\n//               {bookInfo.publisher && <p><strong>Publisher:</strong> {bookInfo.publisher}</p>}\n//               {bookInfo.publishedDate && <p><strong>Published Date:</strong> {bookInfo.publishedDate}</p>}\n//               {bookInfo.description && <p><strong>Description:</strong> {bookInfo.description}</p>}\n//               {bookInfo.imageLinks && bookInfo.imageLinks.thumbnail ? (\n//                 <img src={bookInfo.imageLinks.thumbnail} alt={`${bookInfo.title} cover`} />\n//               ) : (\n//                 <img src=\"/placeholder.png\" alt=\"No cover available\" />\n//               )}\n//             </div>\n            \n//           ) : (\n//             <p>No book information available.</p>\n//           )}\n//           <button onClick={handleScanAgain}>Scan Again</button>\n//         </div>\n//       ) : (\n//         <div className=\"scanner\">\n//           <div ref={scannerRef} className=\"scanner-container\" />\n//           {scanning && <p>Scanning for barcodes...</p>}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,MAAM;AAC3B,SAASC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,WAAW,QAAO,OAAO;AAC/D,OAAO,WAAW;;AAIlignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}