{"ast":null,"code":"const fs = require('fs');\n\n/**\n * Generate the filename of the prebuild file.\n * The format of the name is possible to calculate based on some options\n * @param {object} options\n * @returns\n */\nfunction getPrebuildName(options) {\n  if (!options.napi_version) throw new Error('NAN not implemented'); // TODO\n\n  const tokens = [options.name, options.platform, options.arch,\n  // options.armv ? (options.arch === 'arm64' ? '8' : vars.arm_version) : null,\n  options.libc && options.platform === 'linux' ? options.libc : null];\n  return `${tokens.filter(t => !!t).join('-')}/${options.runtime}-napi-v${options.napi_version}.node`;\n}\nfunction isNwjs() {\n  return !!(process.versions && process.versions.nw);\n}\nfunction isElectron() {\n  if (process.versions && process.versions.electron) return true;\n  if (process.env.ELECTRON_RUN_AS_NODE) return true;\n  return typeof window !== 'undefined' && window.process && window.process.type === 'renderer';\n}\nfunction isAlpine(platform) {\n  return platform === 'linux' && fs.existsSync('/etc/alpine-release');\n}\nmodule.exports = {\n  getPrebuildName,\n  isNwjs,\n  isElectron,\n  isAlpine\n};","map":{"version":3,"names":["fs","require","getPrebuildName","options","napi_version","Error","tokens","name","platform","arch","libc","filter","t","join","runtime","isNwjs","process","versions","nw","isElectron","electron","env","ELECTRON_RUN_AS_NODE","window","type","isAlpine","existsSync","module","exports"],"sources":["/Users/parkerhuang/Desktop/projects/books/node_modules/pkg-prebuilds/lib/prebuild.js"],"sourcesContent":["const fs = require('fs')\n\n/**\n * Generate the filename of the prebuild file.\n * The format of the name is possible to calculate based on some options\n * @param {object} options\n * @returns\n */\nfunction getPrebuildName(options) {\n\tif (!options.napi_version) throw new Error('NAN not implemented') // TODO\n\n\tconst tokens = [\n\t\toptions.name,\n\t\toptions.platform,\n\t\toptions.arch,\n\t\t// options.armv ? (options.arch === 'arm64' ? '8' : vars.arm_version) : null,\n\t\toptions.libc && options.platform === 'linux' ? options.libc : null,\n\t]\n\treturn `${tokens.filter((t) => !!t).join('-')}/${options.runtime}-napi-v${options.napi_version}.node`\n}\n\nfunction isNwjs() {\n\treturn !!(process.versions && process.versions.nw)\n}\n\nfunction isElectron() {\n\tif (process.versions && process.versions.electron) return true\n\tif (process.env.ELECTRON_RUN_AS_NODE) return true\n\treturn typeof window !== 'undefined' && window.process && window.process.type === 'renderer'\n}\n\nfunction isAlpine(platform) {\n\treturn platform === 'linux' && fs.existsSync('/etc/alpine-release')\n}\n\nmodule.exports = {\n\tgetPrebuildName,\n\tisNwjs,\n\tisElectron,\n\tisAlpine,\n}\n"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACC,OAAO,EAAE;EACjC,IAAI,CAACA,OAAO,CAACC,YAAY,EAAE,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC,EAAC;;EAElE,MAAMC,MAAM,GAAG,CACdH,OAAO,CAACI,IAAI,EACZJ,OAAO,CAACK,QAAQ,EAChBL,OAAO,CAACM,IAAI;EACZ;EACAN,OAAO,CAACO,IAAI,IAAIP,OAAO,CAACK,QAAQ,KAAK,OAAO,GAAGL,OAAO,CAACO,IAAI,GAAG,IAAI,CAClE;EACD,OAAO,GAAGJ,MAAM,CAACK,MAAM,CAAEC,CAAC,IAAK,CAAC,CAACA,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,IAAIV,OAAO,CAACW,OAAO,UAAUX,OAAO,CAACC,YAAY,OAAO;AACtG;AAEA,SAASW,MAAMA,CAAA,EAAG;EACjB,OAAO,CAAC,EAAEC,OAAO,CAACC,QAAQ,IAAID,OAAO,CAACC,QAAQ,CAACC,EAAE,CAAC;AACnD;AAEA,SAASC,UAAUA,CAAA,EAAG;EACrB,IAAIH,OAAO,CAACC,QAAQ,IAAID,OAAO,CAACC,QAAQ,CAACG,QAAQ,EAAE,OAAO,IAAI;EAC9D,IAAIJ,OAAO,CAACK,GAAG,CAACC,oBAAoB,EAAE,OAAO,IAAI;EACjD,OAAO,OAAOC,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACP,OAAO,IAAIO,MAAM,CAACP,OAAO,CAACQ,IAAI,KAAK,UAAU;AAC7F;AAEA,SAASC,QAAQA,CAACjB,QAAQ,EAAE;EAC3B,OAAOA,QAAQ,KAAK,OAAO,IAAIR,EAAE,CAAC0B,UAAU,CAAC,qBAAqB,CAAC;AACpE;AAEAC,MAAM,CAACC,OAAO,GAAG;EAChB1B,eAAe;EACfa,MAAM;EACNI,UAAU;EACVM;AACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}